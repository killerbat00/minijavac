Program -> (ClassDeclaration)* EOT

ClassDeclaration ->
	class id {
		(FieldDeclaration | MethodDeclaration)*
	}

FieldDeclaration -> Declarators id;
MethodDeclaration ->
	Declarators id ( ParameterList? ) {
		Statement* (return Expression ;)?
	}

Declarators -> (public | private)? static? Type

Type -> PrimType | ClassType | ArrType	

PrimType -> int | boolean | void

ClassType -> id

ArrType -> (int | ClassType) []

ParemeterList -> Type id (, Type id)*

ArgumentList -> Expression (, Expression)*

Reference -> BaseRef RefTail?	// Reference -> (this | id ([ Expression ])?) RefTail?
BaseRef -> this | id RefArrID?
RefArrID -> [ Expression ]
RefTail -> . DotFollow RefTail?
DotFollow -> id RefArrID?

Statement ->
		{ Statement* }
	| Type id = Expression ;
	| Reference SmtRefTail
	| if ( Expression ) Statement (else Statement)?
	| while ( Expression ) Statement

SmtRefTail -> = Expression ; | ( ArgumentList? ) ;

Expression ->
	  Reference ExpRefTail? ExpTail?
	| unop Expression
	| ( Expression ) ExpTail?
	| num ExpTail?
	| true
	| false
	| new ExpDecl ExpTail?
ExpTail -> binop Expression
ExpRefTail -> ( ArgumentList? )
ExpDecl -> id (() | [ Expression ]) | int [ Expression ]	

Expression ->
	(num | id) ExpRefTail? ExpTail?
	| unop Expression 


ExpRefTail -> ( ArgumentList? )
ExpTail -> binop Expression
ExpTailPrime -> (+ | - ) NewTerm


Expression -> Term ExpPrime?
ExpPrime -> + Exp | - Exp

Term -> Factor TermPrime?
TermPrime -> * Term | / Term

Factor -> num | ( Expression ) | unop Factor